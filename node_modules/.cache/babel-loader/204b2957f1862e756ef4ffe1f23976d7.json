{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/frontend/src/Components/ChartComponentTest/BarChartTest.js\";\n// import React, {Component} from 'react';\n// import axios from 'axios';\n// import Chart from \"./Chart\";\n// import './barChart.css';\n//\n// class BarChartTest extends Component {\n//     // Constructs props based on state\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             chartData: {\n//                 labels:[],\n//                 datasets:[{\n//                     label: '',\n//                     data: null,\n//                     backgroundColor: ''\n//                 }]\n//             },\n//         }\n//     }\n//\n//     revenueCall(){\n//         axios\n//             .get(`api/business/revenue/2020`)\n//             .then(response => {\n//                 console.log(response) // Logs response as data tree\n//                 const dataStat = response.data;\n//\n//                 this.setState({\n//                     chartData:{\n//                         labels:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n//                         datasets: [\n//                             {\n//                                 label: 'Revenue',\n//                                 data: dataStat,\n//                                 backgroundColor: '#9D0000',\n//                             }\n//                         ]\n//                     }\n//                 }); // End of setState\n//             })\n//             .catch(error => this.setState({error, isLoading: false}));\n//     }\n//\n//     // Post-render operation for the backend API call for data.\n//     componentDidMount () {\n//         this.revenueCall()\n//     }\n//\n//     render () {\n//         if(!this.state.chartData.datasets[0].data){return null}\n//         else {\n//             return (\n//                 <div>\n//                     {/*<h1>{ this.state.chartData.datasets[0].data[1] }</h1>*/}\n//                     <Chart chartData={ this.state.chartData } />\n//                 </div>\n//             );\n//         }\n//     }\n// }\n//\n// export default BarChartTest;\nimport React, { Component } from 'react';\nimport classes from '../Examples/DashboardChartTest/Dashboard/Dashboard.module.css';\nimport axios from 'axios';\nimport Chart from \"./Chart\";\nimport './barChart.css';\nimport ExampleChart from \"./Chart\";\nimport '../../Screens/Business/HomeScreen/homescreen.scss';\nimport { revenueYearData, salesMadeYearData, growthYearData, avgOrderYearData, yearLabels, quarterLabels } from \"./MockData\";\n\nclass BarChartTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // chartData: {\n      //     title: \"\",\n      //     labels:[],\n      //     datasets:[{\n      //         label: \"\",\n      //         data: null,\n      //         backgroundColor: ''\n      //     }]\n      // },\n      data: revenueYearData,\n      title: \"Revenue\",\n      labels: yearLabels,\n      barColours: '#9D0000'\n    };\n\n    this.handleButtonClick = e => {\n      const {\n        value\n      } = e.target;\n      const isRevenue = value === \"revenue\";\n      const isSales = value === \"sales\";\n      const isGrowth = value === \"growth\";\n      const isAvgOrder = value === \"avgOrder\";\n      const isYear = value === \"yearly\";\n      const isQuarter = value === \"quarterly\"; // const newData =\n      //     isYear ?\n      //         isRevenue ? this.revenueCall()\n      //         : isSales ? salesMadeYearData\n      //         : isGrowth ? growthYearData\n      //         : isAvgOrder ? avgOrderYearData\n      //         : null\n      //     : isQuarter ?\n      //         isRevenue ? this.revenueCall()\n      //         : isSales ? salesMadeQuarterData\n      //         : isGrowth ? growthQuarterData\n      //         : isAvgOrder ? avgOrderQuarterData\n      //         : null\n      //     :null\n\n      const newData = isRevenue ? revenueYearData : isSales ? salesMadeYearData : isGrowth ? growthYearData : isAvgOrder ? avgOrderYearData : null;\n      const newLabel = isYear ? yearLabels : isQuarter ? quarterLabels : null;\n      const newColor = isRevenue ? \"#9D0000\" : isSales ? \"#79E7F3\" : isGrowth ? \"#79F38C\" : isAvgOrder ? \"#A3A6A3\" : null;\n      const newTitle = isRevenue ? \"Revenue\" : isSales ? \"Sales\" : isGrowth ? \"Growth\" : isAvgOrder ? \"Average Order\" : null;\n      this.setState({\n        data: newData,\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        title: newTitle,\n        barColours: newColor\n      });\n    };\n  }\n\n  revenueCall() {\n    axios.get(`api/business/revenue/2020`).then(response => {\n      console.log(response); // Logs response as data tree\n\n      const dataStat = response.data;\n      this.setState({\n        chartData: {\n          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n          datasets: [{\n            label: 'Revenue',\n            data: dataStat,\n            backgroundColor: '#9D0000'\n          }]\n        }\n      }); // End of setState\n    }).catch(error => this.setState({\n      error,\n      isLoading: false\n    }));\n  }\n\n  render() {\n    const {\n      title,\n      data,\n      labels,\n      barColours\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttonContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart-controls\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"graph-btn revenue\",\n      onClick: this.handleButtonClick,\n      value: \"revenue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    }, \" \", \"Revenue\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"graph-btn sales\",\n      onClick: this.handleButtonClick,\n      value: \"sales\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, \" \", \"Sales Made\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"graph-btn growth\",\n      onClick: this.handleButtonClick,\n      value: \"growth\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 29\n      }\n    }, \" \", \"Growth\"), \" \", /*#__PURE__*/React.createElement(\"button\", {\n      className: \"graph-btn avg-order\",\n      onClick: this.handleButtonClick,\n      value: \"avgOrder\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 29\n      }\n    }, \" \", \"Average Order\"), \" \"), \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }\n    }, title), /*#__PURE__*/React.createElement(ExampleChart, {\n      title: title,\n      data: data,\n      labels: labels,\n      barColours: barColours,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nexport default BarChartTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/frontend/src/Components/ChartComponentTest/BarChartTest.js"],"names":["React","Component","classes","axios","Chart","ExampleChart","revenueYearData","salesMadeYearData","growthYearData","avgOrderYearData","yearLabels","quarterLabels","BarChartTest","state","data","title","labels","barColours","handleButtonClick","e","value","target","isRevenue","isSales","isGrowth","isAvgOrder","isYear","isQuarter","newData","newLabel","newColor","newTitle","setState","revenueCall","get","then","response","console","log","dataStat","chartData","datasets","label","backgroundColor","catch","error","isLoading","render","container","buttonContainer"],"mappings":"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","sourcesContent":["// import React, {Component} from 'react';\n// import axios from 'axios';\n// import Chart from \"./Chart\";\n// import './barChart.css';\n//\n// class BarChartTest extends Component {\n//     // Constructs props based on state\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             chartData: {\n//                 labels:[],\n//                 datasets:[{\n//                     label: '',\n//                     data: null,\n//                     backgroundColor: ''\n//                 }]\n//             },\n//         }\n//     }\n//\n//     revenueCall(){\n//         axios\n//             .get(`api/business/revenue/2020`)\n//             .then(response => {\n//                 console.log(response) // Logs response as data tree\n//                 const dataStat = response.data;\n//\n//                 this.setState({\n//                     chartData:{\n//                         labels:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n//                         datasets: [\n//                             {\n//                                 label: 'Revenue',\n//                                 data: dataStat,\n//                                 backgroundColor: '#9D0000',\n//                             }\n//                         ]\n//                     }\n//                 }); // End of setState\n//             })\n//             .catch(error => this.setState({error, isLoading: false}));\n//     }\n//\n//     // Post-render operation for the backend API call for data.\n//     componentDidMount () {\n//         this.revenueCall()\n//     }\n//\n//     render () {\n//         if(!this.state.chartData.datasets[0].data){return null}\n//         else {\n//             return (\n//                 <div>\n//                     {/*<h1>{ this.state.chartData.datasets[0].data[1] }</h1>*/}\n//                     <Chart chartData={ this.state.chartData } />\n//                 </div>\n//             );\n//         }\n//     }\n// }\n//\n// export default BarChartTest;\n\nimport React, {Component} from 'react';\nimport classes from'../Examples/DashboardChartTest/Dashboard/Dashboard.module.css';\nimport axios from 'axios';\nimport Chart from \"./Chart\";\nimport './barChart.css';\nimport ExampleChart from \"./Chart\";\nimport '../../Screens/Business/HomeScreen/homescreen.scss';\nimport {\n    revenueYearData,\n    salesMadeYearData,\n    growthYearData,\n    avgOrderYearData,\n    yearLabels, quarterLabels,\n} from \"./MockData\"\n\nclass BarChartTest extends Component {\n    // Constructs props based on state\n        state = {\n            // chartData: {\n            //     title: \"\",\n            //     labels:[],\n            //     datasets:[{\n            //         label: \"\",\n            //         data: null,\n            //         backgroundColor: ''\n            //     }]\n            // },\n            data: revenueYearData,\n            title: \"Revenue\",\n            labels: yearLabels,\n            barColours: '#9D0000'\n        }\n\n    handleButtonClick = e => {\n        const { value } = e.target;\n        const isRevenue = value === \"revenue\";\n        const isSales = value === \"sales\";\n        const isGrowth = value === \"growth\";\n        const isAvgOrder = value === \"avgOrder\";\n\n        const isYear = value === \"yearly\";\n        const isQuarter = value === \"quarterly\";\n\n        // const newData =\n        //     isYear ?\n        //         isRevenue ? this.revenueCall()\n        //         : isSales ? salesMadeYearData\n        //         : isGrowth ? growthYearData\n        //         : isAvgOrder ? avgOrderYearData\n        //         : null\n        //     : isQuarter ?\n        //         isRevenue ? this.revenueCall()\n        //         : isSales ? salesMadeQuarterData\n        //         : isGrowth ? growthQuarterData\n        //         : isAvgOrder ? avgOrderQuarterData\n        //         : null\n        //     :null\n\n        const newData =\n            isRevenue ? revenueYearData\n            : isSales ? salesMadeYearData\n            : isGrowth ? growthYearData\n            : isAvgOrder ? avgOrderYearData\n            : null;\n\n        const newLabel = isYear ? yearLabels : isQuarter ? quarterLabels : null;\n        const newColor = isRevenue ? \"#9D0000\" : isSales ? \"#79E7F3\" : isGrowth ? \"#79F38C\" : isAvgOrder ? \"#A3A6A3\" : null\n        const newTitle = isRevenue ? \"Revenue\" : isSales ? \"Sales\" : isGrowth ? \"Growth\" : isAvgOrder ? \"Average Order\" : null;\n\n\n        this.setState({\n            data: newData,\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            title: newTitle,\n            barColours: newColor\n        })\n    }\n\n    revenueCall(){\n        axios\n            .get(`api/business/revenue/2020`)\n            .then(response => {\n                console.log(response) // Logs response as data tree\n                const dataStat = response.data;\n\n                this.setState({\n                    chartData:{\n                        labels:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                        datasets: [\n                            {\n                                label: 'Revenue',\n                                data: dataStat,\n                                backgroundColor: '#9D0000',\n                            }\n                        ]\n                    }\n                }); // End of setState\n            })\n            .catch(error => this.setState({error, isLoading: false}));\n    }\n\n    render () {\n        const { title, data, labels, barColours } = this.state;\n\n            return (\n                <div className={classes.container}>\n                    <div className={classes.buttonContainer}>\n                        <div className=\"chart-controls\"> {/* Graph Controls Section */}\n                            <button\n                                className=\"graph-btn revenue\"\n                                onClick={this.handleButtonClick}\n                                value=\"revenue\"\n                            > {/* Revenue Button */}\n                                Revenue\n                            </button> {/* End of Revenue Button */}\n                            <button\n                                className=\"graph-btn sales\"\n                                onClick={this.handleButtonClick}\n                                value=\"sales\"\n                            > {/* Sales Button */}\n                                Sales Made\n                            </button> {/* End of Sales Button */}\n                            <button\n                                className=\"graph-btn growth\"\n                                onClick={this.handleButtonClick}\n                                value=\"growth\"\n                            > {/* Growth Button */}\n                                Growth\n                            </button> {/* End of Growth Button */}\n                            <button\n                                className=\"graph-btn avg-order\"\n                                onClick={this.handleButtonClick}\n                                value=\"avgOrder\"\n                            > {/* Avg Order Button */}\n                                Average Order\n                            </button> {/* End of Avg Order Button */}\n                        </div> {/* End of Graph Controls Section */}\n                    </div>\n                    <h3>{title}</h3>\n                    <ExampleChart title={title} data={data} labels={labels} barColours={barColours}/>\n                </div>\n            );\n    }\n}\n\nexport default BarChartTest;\n"]},"metadata":{},"sourceType":"module"}