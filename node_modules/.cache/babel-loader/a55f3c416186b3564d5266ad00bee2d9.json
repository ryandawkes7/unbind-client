{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/frontend/src/Components/Examples/DashboardChartTest/Dashboard/Dashboard.js\";\nimport React, { Component } from 'react';\nimport classes from \"./Dashboard.module.css\";\nimport LineGraphTest from \"../LineGraph/LineGraphTest\";\nimport axios from 'axios';\nimport { managerYearData, nationalAverageYearData, yearLabels, managerQuarterData, nationalAverageQuarterData, quarterLabels, managerMonthData, managerWeekData, monthLabels, weekLabels, nationalAverageMonthData, nationalAverageWeekData } from \"../MockData/MockData\";\nexport default class Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // data: managerYearData,\n      data: [],\n      average: nationalAverageYearData,\n      labels: yearLabels\n    };\n\n    this.handleButtonClick = e => {\n      const {\n        value\n      } = e.target; // Variable for storing event target\n\n      const isAnnual = value === \"annual\"; // Variable where the event target (i.e. the time scale) is initially set to equal 'annual'\n\n      const isQuarter = value === \"quarter\";\n      const isMonth = value === \"month\";\n      const isWeek = value === \"week\"; // Target's value (annual, quarter, month, week)\n\n      const getData = async () => {\n        try {\n          return await axios.get(`api/business/revenue/${value}`); //\n        } catch (error) {\n          console.log(error);\n        }\n      };\n\n      getData().then(response => {\n        console.log(response.data); // Variables for updating (and passing) quarterly data\n        // If data has a value of annual, it passes the year data. If not, it passes quarter data etc.\n        // const newData = isAnnual ? managerYearData : isQuarter ? managerQuarterData: isMonth ? managerMonthData : isWeek ? managerWeekData : null;\n\n        const newLabels = isAnnual ? yearLabels : isQuarter ? quarterLabels : isMonth ? monthLabels : isWeek ? weekLabels : null;\n        const newAverage = isAnnual ? nationalAverageYearData : isQuarter ? nationalAverageQuarterData : isMonth ? nationalAverageMonthData : isWeek ? nationalAverageWeekData : null; // const newData = getData()\n        // Parameter that, once called, passes in the new data\n\n        this.setState({\n          data: response.data,\n          average: newAverage,\n          labels: newLabels\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    axios({\n      url: 'api/business/revenue/annual',\n      method: 'GET'\n    }).then(response => {\n      console.log(response.data);\n      this.setState({\n        data: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  } // Function for when a filter button is pressed\n\n\n  render() {\n    const {\n      data,\n      average,\n      labels\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.buttonContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }\n    }, \"Product Sales\"), /*#__PURE__*/React.createElement(\"select\", {\n      onChange: this.handleButtonClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"annual\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, \"Year\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"quarter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, \"Quarter\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 25\n      }\n    }, \"Month\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"week\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }, \"Week\"))), /*#__PURE__*/React.createElement(LineGraphTest, {\n      data: data,\n      average: average,\n      labels: labels,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/frontend/src/Components/Examples/DashboardChartTest/Dashboard/Dashboard.js"],"names":["React","Component","classes","LineGraphTest","axios","managerYearData","nationalAverageYearData","yearLabels","managerQuarterData","nationalAverageQuarterData","quarterLabels","managerMonthData","managerWeekData","monthLabels","weekLabels","nationalAverageMonthData","nationalAverageWeekData","Dashboard","state","data","average","labels","handleButtonClick","e","value","target","isAnnual","isQuarter","isMonth","isWeek","getData","get","error","console","log","then","response","newLabels","newAverage","setState","componentDidMount","url","method","catch","render","container","buttonContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from \"./Dashboard.module.css\";\nimport LineGraphTest from \"../LineGraph/LineGraphTest\";\nimport axios from 'axios';\nimport {\n    managerYearData,\n    nationalAverageYearData,\n    yearLabels,\n    managerQuarterData,\n    nationalAverageQuarterData,\n    quarterLabels,\n    managerMonthData,\n    managerWeekData,\n    monthLabels,\n    weekLabels,\n    nationalAverageMonthData,\n    nationalAverageWeekData,\n} from \"../MockData/MockData\";\n\nexport default class Dashboard extends Component {\n    // Initial state upon loading page. Data called from 'MockData.js'\n    state = {\n        // data: managerYearData,\n        data: [],\n        average: nationalAverageYearData,\n        labels: yearLabels\n    }\n\n    componentDidMount() {\n        axios({\n            url: 'api/business/revenue/annual',\n            method: 'GET'\n        })\n        .then((response) => {\n            console.log(response.data)\n            this.setState({ data: response.data })\n        })\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    // Function for when a filter button is pressed\n    handleButtonClick = e => {\n        \n        const { value } = e.target; // Variable for storing event target\n        const isAnnual = value === \"annual\"; // Variable where the event target (i.e. the time scale) is initially set to equal 'annual'\n        const isQuarter = value === \"quarter\";\n        const isMonth = value === \"month\";\n        const isWeek = value === \"week\";\n\n        // Target's value (annual, quarter, month, week)\n        const getData = async () => {\n            try {\n                return await axios.get(`api/business/revenue/${value}`)//\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        getData()\n            .then(response => {\n                console.log(response.data)\n                // Variables for updating (and passing) quarterly data\n                // If data has a value of annual, it passes the year data. If not, it passes quarter data etc.\n                // const newData = isAnnual ? managerYearData : isQuarter ? managerQuarterData: isMonth ? managerMonthData : isWeek ? managerWeekData : null;\n                const newLabels = isAnnual ? yearLabels : isQuarter ? quarterLabels: isMonth ? monthLabels : isWeek ? weekLabels : null;\n                const newAverage = isAnnual ? nationalAverageYearData : isQuarter ? nationalAverageQuarterData : isMonth ? nationalAverageMonthData : isWeek ? nationalAverageWeekData : null;\n                // const newData = getData()\n                // Parameter that, once called, passes in the new data\n                this.setState({\n                    data: response.data,\n                    average: newAverage,\n                    labels: newLabels\n                })\n            })\n    }\n\n    render() {\n        const { data, average, labels } = this.state;\n        return (\n            <div className={classes.container}>\n                <div className={classes.buttonContainer}>\n                    <h6>Product Sales</h6>\n                    <select onChange={this.handleButtonClick}>\n                        <option value=\"annual\">Year</option>\n                        <option value=\"quarter\">Quarter</option>\n                        <option value=\"month\">Month</option>\n                        <option value=\"week\">Week</option>\n                    </select>\n                </div>\n                <LineGraphTest data={data} average={average} labels={labels} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}