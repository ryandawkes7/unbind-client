{"ast":null,"code":"import _classCallCheck from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";// import React, {Component} from 'react';\n// import axios from 'axios';\n// import Chart from \"./Chart\";\n// import './barChart.css';\n//\n// class BarChartTest extends Component {\n//     // Constructs props based on state\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             chartData: {\n//                 labels:[],\n//                 datasets:[{\n//                     label: '',\n//                     data: null,\n//                     backgroundColor: ''\n//                 }]\n//             },\n//         }\n//     }\n//\n//     revenueCall(){\n//         axios\n//             .get(`api/business/revenue/2020`)\n//             .then(response => {\n//                 console.log(response) // Logs response as data tree\n//                 const dataStat = response.data;\n//\n//                 this.setState({\n//                     chartData:{\n//                         labels:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n//                         datasets: [\n//                             {\n//                                 label: 'Revenue',\n//                                 data: dataStat,\n//                                 backgroundColor: '#9D0000',\n//                             }\n//                         ]\n//                     }\n//                 }); // End of setState\n//             })\n//             .catch(error => this.setState({error, isLoading: false}));\n//     }\n//\n//     // Post-render operation for the backend API call for data.\n//     componentDidMount () {\n//         this.revenueCall()\n//     }\n//\n//     render () {\n//         if(!this.state.chartData.datasets[0].data){return null}\n//         else {\n//             return (\n//                 <div>\n//                     {/*<h1>{ this.state.chartData.datasets[0].data[1] }</h1>*/}\n//                     <Chart chartData={ this.state.chartData } />\n//                 </div>\n//             );\n//         }\n//     }\n// }\n//\n// export default BarChartTest;\nimport React,{Component}from'react';import classes from'../Examples/DashboardChartTest/Dashboard/Dashboard.module.css';import axios from'axios';import Chart from\"./Chart\";import'./barChart.css';import ExampleChart from\"./Chart\";import'../../Screens/Business/HomeScreen/homescreen.scss';import{revenueYearData,salesMadeYearData,growthYearData,avgOrderYearData,yearLabels,quarterLabels}from\"./MockData\";var BarChartTest=/*#__PURE__*/function(_Component){_inherits(BarChartTest,_Component);var _super=_createSuper(BarChartTest);function BarChartTest(){var _this;_classCallCheck(this,BarChartTest);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={// chartData: {\n//     title: \"\",\n//     labels:[],\n//     datasets:[{\n//         label: \"\",\n//         data: null,\n//         backgroundColor: ''\n//     }]\n// },\ndata:revenueYearData,title:\"Revenue\",labels:yearLabels,barColours:'#9D0000'};_this.handleButtonClick=function(e){var value=e.target.value;var isRevenue=value===\"revenue\";var isSales=value===\"sales\";var isGrowth=value===\"growth\";var isAvgOrder=value===\"avgOrder\";var isYear=value===\"yearly\";var isQuarter=value===\"quarterly\";// const newData =\n//     isYear ?\n//         isRevenue ? this.revenueCall()\n//         : isSales ? salesMadeYearData\n//         : isGrowth ? growthYearData\n//         : isAvgOrder ? avgOrderYearData\n//         : null\n//     : isQuarter ?\n//         isRevenue ? this.revenueCall()\n//         : isSales ? salesMadeQuarterData\n//         : isGrowth ? growthQuarterData\n//         : isAvgOrder ? avgOrderQuarterData\n//         : null\n//     :null\nvar newData=isRevenue?revenueYearData:isSales?salesMadeYearData:isGrowth?growthYearData:isAvgOrder?avgOrderYearData:null;var newLabel=isYear?yearLabels:isQuarter?quarterLabels:null;var newColor=isRevenue?\"#9D0000\":isSales?\"#79E7F3\":isGrowth?\"#79F38C\":isAvgOrder?\"#A3A6A3\":null;var newTitle=isRevenue?\"Revenue\":isSales?\"Sales\":isGrowth?\"Growth\":isAvgOrder?\"Average Order\":null;_this.setState({data:newData,labels:['January','February','March','April','May','June','July','August','September','October','November','December'],title:newTitle,barColours:newColor});};return _this;}_createClass(BarChartTest,[{key:\"revenueCall\",value:function revenueCall(){var _this2=this;axios.get(\"api/business/revenue/2020\").then(function(response){console.log(response);// Logs response as data tree\nvar dataStat=response.data;_this2.setState({chartData:{labels:['January','February','March','April','May','June','July','August','September','October','November','December'],datasets:[{label:'Revenue',data:dataStat,backgroundColor:'#9D0000'}]}});// End of setState\n}).catch(function(error){return _this2.setState({error:error,isLoading:false});});}},{key:\"render\",value:function render(){var _this$state=this.state,title=_this$state.title,data=_this$state.data,labels=_this$state.labels,barColours=_this$state.barColours;return/*#__PURE__*/React.createElement(\"div\",{className:classes.container},/*#__PURE__*/React.createElement(\"div\",{className:classes.buttonContainer},/*#__PURE__*/React.createElement(\"div\",{className:\"chart-controls\"},\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"graph-btn revenue\",onClick:this.handleButtonClick,value:\"revenue\"},\" \",\"Revenue\"),\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"graph-btn sales\",onClick:this.handleButtonClick,value:\"sales\"},\" \",\"Sales Made\"),\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"graph-btn growth\",onClick:this.handleButtonClick,value:\"growth\"},\" \",\"Growth\"),\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"graph-btn avg-order\",onClick:this.handleButtonClick,value:\"avgOrder\"},\" \",\"Average Order\"),\" \"),\" \"),/*#__PURE__*/React.createElement(\"h3\",null,title),/*#__PURE__*/React.createElement(ExampleChart,{title:title,data:data,labels:labels,barColours:barColours}));}}]);return BarChartTest;}(Component);export default BarChartTest;","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/frontend/src/Components/ChartComponentTest/BarChartTest.js"],"names":["React","Component","classes","axios","Chart","ExampleChart","revenueYearData","salesMadeYearData","growthYearData","avgOrderYearData","yearLabels","quarterLabels","BarChartTest","state","data","title","labels","barColours","handleButtonClick","e","value","target","isRevenue","isSales","isGrowth","isAvgOrder","isYear","isQuarter","newData","newLabel","newColor","newTitle","setState","get","then","response","console","log","dataStat","chartData","datasets","label","backgroundColor","catch","error","isLoading","container","buttonContainer"],"mappings":"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","sourcesContent":["// import React, {Component} from 'react';\n// import axios from 'axios';\n// import Chart from \"./Chart\";\n// import './barChart.css';\n//\n// class BarChartTest extends Component {\n//     // Constructs props based on state\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             chartData: {\n//                 labels:[],\n//                 datasets:[{\n//                     label: '',\n//                     data: null,\n//                     backgroundColor: ''\n//                 }]\n//             },\n//         }\n//     }\n//\n//     revenueCall(){\n//         axios\n//             .get(`api/business/revenue/2020`)\n//             .then(response => {\n//                 console.log(response) // Logs response as data tree\n//                 const dataStat = response.data;\n//\n//                 this.setState({\n//                     chartData:{\n//                         labels:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n//                         datasets: [\n//                             {\n//                                 label: 'Revenue',\n//                                 data: dataStat,\n//                                 backgroundColor: '#9D0000',\n//                             }\n//                         ]\n//                     }\n//                 }); // End of setState\n//             })\n//             .catch(error => this.setState({error, isLoading: false}));\n//     }\n//\n//     // Post-render operation for the backend API call for data.\n//     componentDidMount () {\n//         this.revenueCall()\n//     }\n//\n//     render () {\n//         if(!this.state.chartData.datasets[0].data){return null}\n//         else {\n//             return (\n//                 <div>\n//                     {/*<h1>{ this.state.chartData.datasets[0].data[1] }</h1>*/}\n//                     <Chart chartData={ this.state.chartData } />\n//                 </div>\n//             );\n//         }\n//     }\n// }\n//\n// export default BarChartTest;\n\nimport React, {Component} from 'react';\nimport classes from'../Examples/DashboardChartTest/Dashboard/Dashboard.module.css';\nimport axios from 'axios';\nimport Chart from \"./Chart\";\nimport './barChart.css';\nimport ExampleChart from \"./Chart\";\nimport '../../Screens/Business/HomeScreen/homescreen.scss';\nimport {\n    revenueYearData,\n    salesMadeYearData,\n    growthYearData,\n    avgOrderYearData,\n    yearLabels, quarterLabels,\n} from \"./MockData\"\n\nclass BarChartTest extends Component {\n    // Constructs props based on state\n        state = {\n            // chartData: {\n            //     title: \"\",\n            //     labels:[],\n            //     datasets:[{\n            //         label: \"\",\n            //         data: null,\n            //         backgroundColor: ''\n            //     }]\n            // },\n            data: revenueYearData,\n            title: \"Revenue\",\n            labels: yearLabels,\n            barColours: '#9D0000'\n        }\n\n    handleButtonClick = e => {\n        const { value } = e.target;\n        const isRevenue = value === \"revenue\";\n        const isSales = value === \"sales\";\n        const isGrowth = value === \"growth\";\n        const isAvgOrder = value === \"avgOrder\";\n\n        const isYear = value === \"yearly\";\n        const isQuarter = value === \"quarterly\";\n\n        // const newData =\n        //     isYear ?\n        //         isRevenue ? this.revenueCall()\n        //         : isSales ? salesMadeYearData\n        //         : isGrowth ? growthYearData\n        //         : isAvgOrder ? avgOrderYearData\n        //         : null\n        //     : isQuarter ?\n        //         isRevenue ? this.revenueCall()\n        //         : isSales ? salesMadeQuarterData\n        //         : isGrowth ? growthQuarterData\n        //         : isAvgOrder ? avgOrderQuarterData\n        //         : null\n        //     :null\n\n        const newData =\n            isRevenue ? revenueYearData\n            : isSales ? salesMadeYearData\n            : isGrowth ? growthYearData\n            : isAvgOrder ? avgOrderYearData\n            : null;\n\n        const newLabel = isYear ? yearLabels : isQuarter ? quarterLabels : null;\n        const newColor = isRevenue ? \"#9D0000\" : isSales ? \"#79E7F3\" : isGrowth ? \"#79F38C\" : isAvgOrder ? \"#A3A6A3\" : null\n        const newTitle = isRevenue ? \"Revenue\" : isSales ? \"Sales\" : isGrowth ? \"Growth\" : isAvgOrder ? \"Average Order\" : null;\n\n\n        this.setState({\n            data: newData,\n            labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            title: newTitle,\n            barColours: newColor\n        })\n    }\n\n    revenueCall(){\n        axios\n            .get(`api/business/revenue/2020`)\n            .then(response => {\n                console.log(response) // Logs response as data tree\n                const dataStat = response.data;\n\n                this.setState({\n                    chartData:{\n                        labels:['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n                        datasets: [\n                            {\n                                label: 'Revenue',\n                                data: dataStat,\n                                backgroundColor: '#9D0000',\n                            }\n                        ]\n                    }\n                }); // End of setState\n            })\n            .catch(error => this.setState({error, isLoading: false}));\n    }\n\n    render () {\n        const { title, data, labels, barColours } = this.state;\n\n            return (\n                <div className={classes.container}>\n                    <div className={classes.buttonContainer}>\n                        <div className=\"chart-controls\"> {/* Graph Controls Section */}\n                            <button\n                                className=\"graph-btn revenue\"\n                                onClick={this.handleButtonClick}\n                                value=\"revenue\"\n                            > {/* Revenue Button */}\n                                Revenue\n                            </button> {/* End of Revenue Button */}\n                            <button\n                                className=\"graph-btn sales\"\n                                onClick={this.handleButtonClick}\n                                value=\"sales\"\n                            > {/* Sales Button */}\n                                Sales Made\n                            </button> {/* End of Sales Button */}\n                            <button\n                                className=\"graph-btn growth\"\n                                onClick={this.handleButtonClick}\n                                value=\"growth\"\n                            > {/* Growth Button */}\n                                Growth\n                            </button> {/* End of Growth Button */}\n                            <button\n                                className=\"graph-btn avg-order\"\n                                onClick={this.handleButtonClick}\n                                value=\"avgOrder\"\n                            > {/* Avg Order Button */}\n                                Average Order\n                            </button> {/* End of Avg Order Button */}\n                        </div> {/* End of Graph Controls Section */}\n                    </div>\n                    <h3>{title}</h3>\n                    <ExampleChart title={title} data={data} labels={labels} barColours={barColours}/>\n                </div>\n            );\n    }\n}\n\nexport default BarChartTest;\n"]},"metadata":{},"sourceType":"module"}