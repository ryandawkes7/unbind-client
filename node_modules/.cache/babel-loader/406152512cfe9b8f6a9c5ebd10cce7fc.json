{"ast":null,"code":"import _classCallCheck from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Chart from\"chart.js\";import classes from\"./LineGraph.module.css\";var myLineChart;//--ChartEx Style Options--//\n// Font Style\nChart.defaults.global.defaultFontFamily=\"'Montserrat', sans-serif\";// Hides Legend\nChart.defaults.global.legend.display=false;//--ChartEx Style Options--//\nvar LineGraphTest=/*#__PURE__*/function(_Component){_inherits(LineGraphTest,_Component);var _super=_createSuper(LineGraphTest);function LineGraphTest(){var _this;_classCallCheck(this,LineGraphTest);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.chartRef=React.createRef();_this.buildChart=function(){// Function for building chart\nvar myChartRef=_this.chartRef.current.getContext(\"2d\");// Variable for chart to be drawn on a 2D canvas\n// Pull data from 'MockData.js'\n// 'data' = 'managerData' | 'average' = 'nationalAverageData' | 'labels' = 'yearLabels'\nvar _this$props=_this.props,data=_this$props.data,average=_this$props.average,labels=_this$props.labels;if(typeof myLineChart!==\"undefined\")myLineChart.destroy();// Check if chart was previously built - if so, destroy chart\nmyLineChart=new Chart(myChartRef,{// Create new chart based on myChartRef (canvas drawing)\ntype:\"line\",// Create line chart\ndata:{//Bring in data\nlabels:labels,// Pulls labels from MockData.js\ndatasets:[{// Information displayed when user hovers over points\nlabel:\"Sales\",// Title\ndata:data,// Data pulled from MockData.js ('managerData')\nfill:false,// No fill\nborderColor:\"#9D0000\"// Set border colour\n},{// Repeat with new information\nlabel:\"National Average\",data:average,fill:false,borderColor:\"#E0E0E0\"}]},options:{//Customize chart options\n}});};return _this;}_createClass(LineGraphTest,[{key:\"componentDidMount\",// Builds and mounts chart based on the current state\nvalue:function componentDidMount(){this.buildChart();}// Updates chart based on new data passed in - specifically for changing filters.\n},{key:\"componentDidUpdate\",value:function componentDidUpdate(){this.buildChart();}},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:classes.graphContainer},/*#__PURE__*/React.createElement(\"canvas\",{id:\"myChart\",ref:this.chartRef}));}}]);return LineGraphTest;}(Component);export{LineGraphTest as default};","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/frontend/src/Components/Examples/DashboardChartTest/LineGraph/LineGraphTest.js"],"names":["React","Component","Chart","classes","myLineChart","defaults","global","defaultFontFamily","legend","display","LineGraphTest","chartRef","createRef","buildChart","myChartRef","current","getContext","props","data","average","labels","destroy","type","datasets","label","fill","borderColor","options","graphContainer"],"mappings":"olBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,CACA,GAAIC,CAAAA,WAAJ,CAEA;AACA;AACAF,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBC,iBAAtB,CAA0C,0BAA1C,CACA;AACAL,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBE,MAAtB,CAA6BC,OAA7B,CAAuC,KAAvC,CACA;GAEqBC,CAAAA,a,uVAEjBC,Q,CAAWX,KAAK,CAACY,SAAN,E,OAaXC,U,CAAa,UAAM,CAAE;AACjB,GAAMC,CAAAA,UAAU,CAAG,MAAKH,QAAL,CAAcI,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB,CAA2D;AAE3D;AACA;AAJe,gBAKmB,MAAKC,KALxB,CAKPC,IALO,aAKPA,IALO,CAKDC,OALC,aAKDA,OALC,CAKQC,MALR,aAKQA,MALR,CAMf,GAAI,MAAOhB,CAAAA,WAAP,GAAuB,WAA3B,CAAwCA,WAAW,CAACiB,OAAZ,GAAuB;AAG/DjB,WAAW,CAAG,GAAIF,CAAAA,KAAJ,CAAUY,UAAV,CAAsB,CAAE;AAClCQ,IAAI,CAAE,MAD0B,CAClB;AACdJ,IAAI,CAAE,CACF;AACAE,MAAM,CAAEA,MAFN,CAEc;AAChBG,QAAQ,CAAE,CACN,CACI;AACAC,KAAK,CAAE,OAFX,CAEoB;AAChBN,IAAI,CAAEA,IAHV,CAGgB;AACZO,IAAI,CAAE,KAJV,CAIiB;AACbC,WAAW,CAAE,SAAU;AAL3B,CADM,CAQN,CACI;AACAF,KAAK,CAAE,kBAFX,CAGIN,IAAI,CAAEC,OAHV,CAIIM,IAAI,CAAE,KAJV,CAKIC,WAAW,CAAE,SALjB,CARM,CAHR,CAF0B,CAsBhCC,OAAO,CAAE,CACL;AADK,CAtBuB,CAAtB,CAAd,CA2BH,C,oEA/CD;kCACoB,CAChB,KAAKd,UAAL,GACH,CAED;+DACqB,CACjB,KAAKA,UAAL,GACH,C,uCAyCQ,CACL,mBACI,2BAAK,SAAS,CAAEV,OAAO,CAACyB,cAAxB,eACI,8BACI,EAAE,CAAC,SADP,CAEI,GAAG,CAAE,KAAKjB,QAFd,EADJ,CADJ,CAQH,C,2BA9DsCV,S,SAAtBS,a","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\nlet myLineChart;\n\n//--ChartEx Style Options--//\n// Font Style\nChart.defaults.global.defaultFontFamily = \"'Montserrat', sans-serif\"\n// Hides Legend\nChart.defaults.global.legend.display = false;\n//--ChartEx Style Options--//\n\nexport default class LineGraphTest extends Component {\n    // Allow access to DOM nodes/React elements in Render() method\n    chartRef = React.createRef();\n\n    // Builds and mounts chart based on the current state\n    componentDidMount() {\n        this.buildChart();\n    }\n\n    // Updates chart based on new data passed in - specifically for changing filters.\n    componentDidUpdate() {\n        this.buildChart();\n    }\n\n\n    buildChart = () => { // Function for building chart\n        const myChartRef = this.chartRef.current.getContext(\"2d\"); // Variable for chart to be drawn on a 2D canvas\n\n        // Pull data from 'MockData.js'\n        // 'data' = 'managerData' | 'average' = 'nationalAverageData' | 'labels' = 'yearLabels'\n        const { data, average, labels } = this.props;\n        if (typeof myLineChart !== \"undefined\") myLineChart.destroy(); // Check if chart was previously built - if so, destroy chart\n\n\n        myLineChart = new Chart(myChartRef, { // Create new chart based on myChartRef (canvas drawing)\n            type: \"line\", // Create line chart\n            data: {\n                //Bring in data\n                labels: labels, // Pulls labels from MockData.js\n                datasets: [\n                    {\n                        // Information displayed when user hovers over points\n                        label: \"Sales\", // Title\n                        data: data, // Data pulled from MockData.js ('managerData')\n                        fill: false, // No fill\n                        borderColor: \"#9D0000\" // Set border colour\n                    },\n                    {\n                        // Repeat with new information\n                        label: \"National Average\",\n                        data: average,\n                        fill: false,\n                        borderColor: \"#E0E0E0\"\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className={classes.graphContainer}>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}