{"ast":null,"code":"import _regeneratorRuntime from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/ryandawkes/Desktop/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import classes from\"./Dashboard.module.css\";import LineGraphTest from\"../LineGraph/LineGraphTest\";import axios from'axios';import{managerYearData,nationalAverageYearData,yearLabels,managerQuarterData,nationalAverageQuarterData,quarterLabels,managerMonthData,managerWeekData,monthLabels,weekLabels,nationalAverageMonthData,nationalAverageWeekData}from\"../MockData/MockData\";var Dashboard=/*#__PURE__*/function(_Component){_inherits(Dashboard,_Component);var _super=_createSuper(Dashboard);function Dashboard(){var _this;_classCallCheck(this,Dashboard);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={// data: managerYearData,\ndata:[],average:nationalAverageYearData,labels:yearLabels};_this.handleButtonClick=function(e){var value=e.target.value;// Variable for storing event target\nvar isAnnual=value===\"annual\";// Variable where the event target (i.e. the time scale) is initially set to equal 'annual'\nvar isQuarter=value===\"quarter\";var isMonth=value===\"month\";var isWeek=value===\"week\";// Target's value (annual, quarter, month, week)\nvar getData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(\"api/business/revenue/\".concat(value));case 3:return _context.abrupt(\"return\",_context.sent);case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 9:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}));return function getData(){return _ref.apply(this,arguments);};}();getData().then(function(response){console.log(response.data);// Variables for updating (and passing) quarterly data\n// If data has a value of annual, it passes the year data. If not, it passes quarter data etc.\n// const newData = isAnnual ? managerYearData : isQuarter ? managerQuarterData: isMonth ? managerMonthData : isWeek ? managerWeekData : null;\nvar newLabels=isAnnual?yearLabels:isQuarter?quarterLabels:isMonth?monthLabels:isWeek?weekLabels:null;var newAverage=isAnnual?nationalAverageYearData:isQuarter?nationalAverageQuarterData:isMonth?nationalAverageMonthData:isWeek?nationalAverageWeekData:null;// const newData = getData()\n// Parameter that, once called, passes in the new data\n_this.setState({data:response.data,average:newAverage,labels:newLabels});});};return _this;}_createClass(Dashboard,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;axios({url:'api/business/revenue/annual',method:'GET'}).then(function(response){console.log(response.data);_this2.setState({data:response.data});}).catch(function(error){console.log(error);});}// Function for when a filter button is pressed\n},{key:\"render\",value:function render(){var _this$state=this.state,data=_this$state.data,average=_this$state.average,labels=_this$state.labels;return/*#__PURE__*/React.createElement(\"div\",{className:classes.container},/*#__PURE__*/React.createElement(\"div\",{className:classes.buttonContainer},/*#__PURE__*/React.createElement(\"h6\",null,\"Product Sales\"),/*#__PURE__*/React.createElement(\"select\",{onChange:this.handleButtonClick},/*#__PURE__*/React.createElement(\"option\",{value:\"annual\"},\"Year\"),/*#__PURE__*/React.createElement(\"option\",{value:\"quarter\"},\"Quarter\"),/*#__PURE__*/React.createElement(\"option\",{value:\"month\"},\"Month\"),/*#__PURE__*/React.createElement(\"option\",{value:\"week\"},\"Week\"))),/*#__PURE__*/React.createElement(LineGraphTest,{data:data,average:average,labels:labels}));}}]);return Dashboard;}(Component);export{Dashboard as default};","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/frontend/src/Components/Examples/DashboardChartTest/Dashboard/Dashboard.js"],"names":["React","Component","classes","LineGraphTest","axios","managerYearData","nationalAverageYearData","yearLabels","managerQuarterData","nationalAverageQuarterData","quarterLabels","managerMonthData","managerWeekData","monthLabels","weekLabels","nationalAverageMonthData","nationalAverageWeekData","Dashboard","state","data","average","labels","handleButtonClick","e","value","target","isAnnual","isQuarter","isMonth","isWeek","getData","get","console","log","then","response","newLabels","newAverage","setState","url","method","catch","error","container","buttonContainer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from \"./Dashboard.module.css\";\nimport LineGraphTest from \"../LineGraph/LineGraphTest\";\nimport axios from 'axios';\nimport {\n    managerYearData,\n    nationalAverageYearData,\n    yearLabels,\n    managerQuarterData,\n    nationalAverageQuarterData,\n    quarterLabels,\n    managerMonthData,\n    managerWeekData,\n    monthLabels,\n    weekLabels,\n    nationalAverageMonthData,\n    nationalAverageWeekData,\n} from \"../MockData/MockData\";\n\nexport default class Dashboard extends Component {\n    // Initial state upon loading page. Data called from 'MockData.js'\n    state = {\n        // data: managerYearData,\n        data: [],\n        average: nationalAverageYearData,\n        labels: yearLabels\n    }\n\n    componentDidMount() {\n        axios({\n            url: 'api/business/revenue/annual',\n            method: 'GET'\n        })\n        .then((response) => {\n            console.log(response.data)\n            this.setState({ data: response.data })\n        })\n        .catch((error) => {\n            console.log(error)\n        })\n    }\n\n    // Function for when a filter button is pressed\n    handleButtonClick = e => {\n        \n        const { value } = e.target; // Variable for storing event target\n        const isAnnual = value === \"annual\"; // Variable where the event target (i.e. the time scale) is initially set to equal 'annual'\n        const isQuarter = value === \"quarter\";\n        const isMonth = value === \"month\";\n        const isWeek = value === \"week\";\n\n        // Target's value (annual, quarter, month, week)\n        const getData = async () => {\n            try {\n                return await axios.get(`api/business/revenue/${value}`)//\n            } catch (error) {\n                console.log(error)\n            }\n        }\n        getData()\n            .then(response => {\n                console.log(response.data)\n                // Variables for updating (and passing) quarterly data\n                // If data has a value of annual, it passes the year data. If not, it passes quarter data etc.\n                // const newData = isAnnual ? managerYearData : isQuarter ? managerQuarterData: isMonth ? managerMonthData : isWeek ? managerWeekData : null;\n                const newLabels = isAnnual ? yearLabels : isQuarter ? quarterLabels: isMonth ? monthLabels : isWeek ? weekLabels : null;\n                const newAverage = isAnnual ? nationalAverageYearData : isQuarter ? nationalAverageQuarterData : isMonth ? nationalAverageMonthData : isWeek ? nationalAverageWeekData : null;\n                // const newData = getData()\n                // Parameter that, once called, passes in the new data\n                this.setState({\n                    data: response.data,\n                    average: newAverage,\n                    labels: newLabels\n                })\n            })\n    }\n\n    render() {\n        const { data, average, labels } = this.state;\n        return (\n            <div className={classes.container}>\n                <div className={classes.buttonContainer}>\n                    <h6>Product Sales</h6>\n                    <select onChange={this.handleButtonClick}>\n                        <option value=\"annual\">Year</option>\n                        <option value=\"quarter\">Quarter</option>\n                        <option value=\"month\">Month</option>\n                        <option value=\"week\">Week</option>\n                    </select>\n                </div>\n                <LineGraphTest data={data} average={average} labels={labels} />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}