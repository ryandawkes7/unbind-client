{"ast":null,"code":"var _jsxFileName = \"/Users/ryandawkes/Desktop/unbind-ui/src/Components/Examples/DashboardChartTest/LineGraph/LineGraphTest.js\";\nimport React, { Component } from 'react';\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\nlet myLineChart; //--ChartEx Style Options--//\n// Font Style\n\nChart.defaults.global.defaultFontFamily = \"'Montserrat', sans-serif\"; // Hides Legend\n\nChart.defaults.global.legend.display = false; //--ChartEx Style Options--//\n\nexport default class LineGraphTest extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n\n    this.buildChart = () => {\n      // Function for building chart\n      const myChartRef = this.chartRef.current.getContext(\"2d\"); // Variable for chart to be drawn on a 2D canvas\n      // Pull data from 'MockData.js'\n      // 'data' = 'managerData' | 'average' = 'nationalAverageData' | 'labels' = 'yearLabels'\n\n      const {\n        data,\n        average,\n        labels\n      } = this.props;\n      if (typeof myLineChart !== \"undefined\") myLineChart.destroy(); // Check if chart was previously built - if so, destroy chart\n\n      myLineChart = new Chart(myChartRef, {\n        // Create new chart based on myChartRef (canvas drawing)\n        type: \"line\",\n        // Create line chart\n        data: {\n          //Bring in data\n          labels: labels,\n          // Pulls labels from MockData.js\n          datasets: [{\n            // Information displayed when user hovers over points\n            label: \"Sales\",\n            // Title\n            data: data,\n            // Data pulled from MockData.js ('managerData')\n            fill: false,\n            // No fill\n            borderColor: \"#9D0000\" // Set border colour\n\n          }, {\n            // Repeat with new information\n            label: \"National Average\",\n            data: average,\n            fill: false,\n            borderColor: \"#E0E0E0\"\n          }]\n        },\n        options: {//Customize chart options\n        }\n      });\n    };\n  }\n\n  // Builds and mounts chart based on the current state\n  componentDidMount() {\n    this.buildChart();\n  } // Updates chart based on new data passed in - specifically for changing filters.\n\n\n  componentDidUpdate() {\n    this.buildChart();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.graphContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/ryandawkes/Desktop/unbind-ui/src/Components/Examples/DashboardChartTest/LineGraph/LineGraphTest.js"],"names":["React","Component","Chart","classes","myLineChart","defaults","global","defaultFontFamily","legend","display","LineGraphTest","chartRef","createRef","buildChart","myChartRef","current","getContext","data","average","labels","props","destroy","type","datasets","label","fill","borderColor","options","componentDidMount","componentDidUpdate","render","graphContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,IAAIC,WAAJ,C,CAEA;AACA;;AACAF,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBC,iBAAtB,GAA0C,0BAA1C,C,CACA;;AACAL,KAAK,CAACG,QAAN,CAAeC,MAAf,CAAsBE,MAAtB,CAA6BC,OAA7B,GAAuC,KAAvC,C,CACA;;AAEA,eAAe,MAAMC,aAAN,SAA4BT,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAEjDU,QAFiD,GAEtCX,KAAK,CAACY,SAAN,EAFsC;;AAAA,SAejDC,UAfiD,GAepC,MAAM;AAAE;AACjB,YAAMC,UAAU,GAAG,KAAKH,QAAL,CAAcI,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB,CADe,CAC4C;AAE3D;AACA;;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA;AAAjB,UAA4B,KAAKC,KAAvC;AACA,UAAI,OAAOhB,WAAP,KAAuB,WAA3B,EAAwCA,WAAW,CAACiB,OAAZ,GANzB,CAMgD;;AAG/DjB,MAAAA,WAAW,GAAG,IAAIF,KAAJ,CAAUY,UAAV,EAAsB;AAAE;AAClCQ,QAAAA,IAAI,EAAE,MAD0B;AAClB;AACdL,QAAAA,IAAI,EAAE;AACF;AACAE,UAAAA,MAAM,EAAEA,MAFN;AAEc;AAChBI,UAAAA,QAAQ,EAAE,CACN;AACI;AACAC,YAAAA,KAAK,EAAE,OAFX;AAEoB;AAChBP,YAAAA,IAAI,EAAEA,IAHV;AAGgB;AACZQ,YAAAA,IAAI,EAAE,KAJV;AAIiB;AACbC,YAAAA,WAAW,EAAE,SALjB,CAK2B;;AAL3B,WADM,EAQN;AACI;AACAF,YAAAA,KAAK,EAAE,kBAFX;AAGIP,YAAAA,IAAI,EAAEC,OAHV;AAIIO,YAAAA,IAAI,EAAE,KAJV;AAKIC,YAAAA,WAAW,EAAE;AALjB,WARM;AAHR,SAF0B;AAsBhCC,QAAAA,OAAO,EAAE,CACL;AADK;AAtBuB,OAAtB,CAAd;AA2BH,KAnDgD;AAAA;;AAIjD;AACAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKf,UAAL;AACH,GAPgD,CASjD;;;AACAgB,EAAAA,kBAAkB,GAAG;AACjB,SAAKhB,UAAL;AACH;;AAyCDiB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAE3B,OAAO,CAAC4B,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKpB,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AA9DgD","sourcesContent":["import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\nlet myLineChart;\n\n//--ChartEx Style Options--//\n// Font Style\nChart.defaults.global.defaultFontFamily = \"'Montserrat', sans-serif\"\n// Hides Legend\nChart.defaults.global.legend.display = false;\n//--ChartEx Style Options--//\n\nexport default class LineGraphTest extends Component {\n    // Allow access to DOM nodes/React elements in Render() method\n    chartRef = React.createRef();\n\n    // Builds and mounts chart based on the current state\n    componentDidMount() {\n        this.buildChart();\n    }\n\n    // Updates chart based on new data passed in - specifically for changing filters.\n    componentDidUpdate() {\n        this.buildChart();\n    }\n\n\n    buildChart = () => { // Function for building chart\n        const myChartRef = this.chartRef.current.getContext(\"2d\"); // Variable for chart to be drawn on a 2D canvas\n\n        // Pull data from 'MockData.js'\n        // 'data' = 'managerData' | 'average' = 'nationalAverageData' | 'labels' = 'yearLabels'\n        const { data, average, labels } = this.props;\n        if (typeof myLineChart !== \"undefined\") myLineChart.destroy(); // Check if chart was previously built - if so, destroy chart\n\n\n        myLineChart = new Chart(myChartRef, { // Create new chart based on myChartRef (canvas drawing)\n            type: \"line\", // Create line chart\n            data: {\n                //Bring in data\n                labels: labels, // Pulls labels from MockData.js\n                datasets: [\n                    {\n                        // Information displayed when user hovers over points\n                        label: \"Sales\", // Title\n                        data: data, // Data pulled from MockData.js ('managerData')\n                        fill: false, // No fill\n                        borderColor: \"#9D0000\" // Set border colour\n                    },\n                    {\n                        // Repeat with new information\n                        label: \"National Average\",\n                        data: average,\n                        fill: false,\n                        borderColor: \"#E0E0E0\"\n                    }\n                ]\n            },\n            options: {\n                //Customize chart options\n            }\n        });\n\n    }\n\n    render() {\n        return (\n            <div className={classes.graphContainer}>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}